require "oldHelloLibrary.Modules.HelloCollision"

-- Definera egenskaper synliga via "properties" fönstret
go.property("gravity", 1000) -- Hastighet i enheter/s/s
go.property("terminal_y", -2000)-- Max hastighet från gravitationen
go.property("slope_limit", 40) -- Maximala vinkeln vi kan gå upp för
go.property("horizontal_drag", 7500) -- Horisontella hastigheten sänks med /drag/ enheter/s, mot 0

function init(self)
	-- Nuvarande hastighet på Y axeln
	self.momentum = vmath.vector3()
	self.amountOfColl = 0
	
	-- Nuddar spelaren marken just nu?
	-- Användbart att veta när man vill hoppa
	self.grounded = false
end

function update(self, dt)
	-- Lägg på gravitation om vi inte nuddar marken
	if self.grounded == false then
		-- Uppdatera nuvarande hastighet
		self.momentum.y = self.momentum.y - self.gravity * dt
		-- Lås hastigheten till vårt max värde
		self.momentum.y = math.max(self.momentum.y, self.terminal_y)
	end
	
	-- Uppdatera positionen från vår momentum
	local pos = go.get_position()
	pos = pos + self.momentum * dt
	go.set_position(pos)
	
	-- Horisontell hastighetsminskning
	-- Gör detta efter positionsändrningen, så det appliseras inför nästa uppdatering
	self.momentum.x = moveTowards(self.momentum.x, 0, self.horizontal_drag * dt)
	
	-- Återställ kollision
	self.grounded = false
end

function on_message(self, message_id, message, sender)

	-- Kollisions meddelande
    if message_id == hash("contact_point_response") then
        if message.group == hash("platform") then
            -- Undersök meddelandet
    	    checkCollAngle(self, message)
        end
    end
    
    -- Hopp meddelande från vårat hero.lua skript
    if message_id == hash("player_says_jump") then
    	if self.grounded then
	    	-- Sätt vår momentum till hopp kraften
	    	self.momentum.y = message.jump_force
	    end
    end
    
    -- Sätt vår momentum till ett specifikt värde
    if message_id == hash("set_momentum") then
    	-- Skriv över vår momentum med nytt värde
		self.momentum = vmath.vector3(message.force)
    end
end

function checkCollAngle(self, message)
	-- Räkna ut vinkeln av kollisionen
	collisionAngle = getCollAngle(message)

	-- Kollar om vinkeln på marken är lämplig att stå på
	if collisionAngle <= self.slope_limit then
		self.grounded = true
		self.momentum.y = 0
	end
	
	-- Kollar om vi slår huvudet i taket på något
	if 180 - collisionAngle <= self.slope_limit then
		-- Återställ vår hastighet ifall den är över 0
		-- Dvs om vi rör oss uppåt
		self.momentum.y = math.min(self.momentum.y, 0)
	end
end

function moveTowards(value, target, maxDelta)
	local delta = target - value
	
	if delta < 0 then
		value = value - math.min(math.abs(delta), maxDelta)
	elseif delta > 0 then
		value = value + math.min(delta, maxDelta)
	end
	
	return value
end